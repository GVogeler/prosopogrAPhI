swagger: "2.0"

info:
  version: 0.1.0
  title: prosopogrAPhI
  description: basic prosopographical data API
  # contact: georg.vogeler@uni-graz.at
  # licence 

schemes:
  - https
  - http
host: dev.monasterium.net
basePath: /prosop.0.1
produces:
  - application/json
  - text/xml
  
paths:
  /factoid:
    get:
      summary: Gets factoids
      description: Gets a list of factoids.
      parameters:
        - $ref: "#/parameters/pageSize"
        - $ref: "#/parameters/pageNumber"
        - $ref: "#/parameters/q"
      responses:
        200:
          description: a list of Factoid
          schema:
            type: array
            items:
              $ref: "#/definitions/Factoid"
        404:
          description: no factoid found
          #ToDo: not found näher definieren
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    post:
      summary: creates or updates factoids
      parameters:
        - name: factoid
          in: body
          description: the factoid
          schema:
            $ref: "#/definitions/Factoid"
      responses:
        204:
          description: factoid created or updated
        400:
          description: factoid could not be created or updated
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /factoid/statement:
    get:
      summary: Gets factoids
      description: Gets a list of factoids.
      parameters:
        - $ref: "#/parameters/pageSize"
        - $ref: "#/parameters/pageNumber"
        - $ref: "#/parameters/q"
        # FixMe: how make q required? Does it make sense to make q required?
      responses:
        200:
          description: a list of Factoid
          schema:
            type: array
            items:
              $ref: "#/definitions/Factoid"
        404:
          description: no factoid found
          #ToDo: not found näher definieren
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /factoid/source:
    get:
      summary: Gets factoids
      description: Gets a list of factoids which contains the q parameter.
      parameters:
        - $ref: "#/parameters/pageSize"
        - $ref: "#/parameters/pageNumber"
        - $ref: "#/parameters/q"
        # FixMe: how make q required? Does it make sense to make q required?
      responses:
        200:
          description: a list of Factoid
          schema:
            type: array
            items:
              $ref: "#/definitions/Factoid"
        404:
          description: no factoid found
          #ToDo: not found näher definieren
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /factoid/{id}:
    get:
      summary: gets the factoid with the {id}
      parameters:
        - name: id
          in: path
          required: true
          description: can be either the local id, or the uri
          type: string
      responses:
        200:
          description: a factoid
          schema:
            $ref: "#/definitions/Factoid"
        404:
          description: the factoid does not exist
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    post:
      # ToDo: Authentication!
      summary: updates or creates if not existent the factoid with the {id}
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: content
          in: body
          schema:
            $ref: "#/definitions/Factoid"
      responses:
        204:
          description: factoid updated or created
        400:
          description: factoid could not be updated or created
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  # ToDo: Which subpaths do we need, e.g.
  #  getting only the person, statement, source of factoid to enhance walk through?
  #  sort order? maybe as path
  /persons:
    get:
      summary: get a list of persons
      parameters:
        - $ref: "#/parameters/pageSize"
        - $ref: "#/parameters/pageNumber"
        - $ref: "#/parameters/q"
      responses:
        200:
          description: a list of persons
          schema:
            type: array
            items:
              $ref: "#/definitions/Person"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /person/{id}/factoids:
    get:
      summary: get all factoids about the person with the {id}
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: a list of persons
          schema:
            $ref: "#/definitions/Person"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /source:
    get:
      summary: gets a list of sources
      parameters:
        - $ref: "#/parameters/pageSize"
        - $ref: "#/parameters/pageNumber"
        - $ref: "#/parameters/q"
      responses:
        200:
          description: a list of sources
          schema:
            $ref: "#/definitions/Source"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /source/{id}:
    get:
      summary: gets the source with the given {id}
      parameters:
        - $ref: "#/parameters/id"
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /source/{id}/factoids:
    get:
      summary: get all factoids extracted from the source with the {id}
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: a list of factoids
          schema:
            $ref: "#/definitions/Factoid"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /source/search:
    get:
      summary: full text search in all literal content of the source description
      # ToDo: Or search in all factoids based on this source?
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /search:
    get:
      summary: full text search in all literal content
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /describe:
    get:
      description: gives basic information about schemas used, numbers of entries and implementation of API
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /describe/statement/schema:
    get:
      description: the schema used to describe the statements
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /describe/return/schemas:
    get:
      description: the schemas supported by the server as return values
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"
      #If multiple are allowed one should be marked as default
  /describe/return/formats:
    get:
      description: the serialisations supported by the server for return values
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /describe/source/schema:
    get:
      description: the schema used to describe the source
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"

definitions:
  Factoid:
    description: A Factoids is a composite of one or more statements about a peroson extracted by somebody from a source at a specific time
    type: object
    items:
      required:
        - id
      properties:
        id:
          $ref: "#/definitions/id"
        person:
          $ref: "#/definitions/Person"
        statement:
          $ref: "#/definitions/Statement"
        source:
          $ref: "#/definitions/Source"
        metadata:
          description: metadata describing the creation event of the factoid
          type: object
          items:
            properties:
              createdBy:
                type: string
              createdWhen:
                type: string # date ? 
  Person:
    description: a Person is an abstract entity representing a human individual (fictional or historical) independet from their cultural desciption by name, status, social relationsships etc. It has therefor only formal identifiers as properties.
    properties:
      id:
        $ref: "#/definitions/id"
      uri:
        $ref: "#/definitions/uri"
      sameAs:
        $ref: "#/definitions/sameAs"
  Statement:
    properties:
      id:
        $ref: "#/definitions/id"
      graph:
        description: statement formalized as RDF assertion with the person referenced in the factoid as subject, following the schema defined in /describe/statement/schema
        type: object
        #Here I would expect to integrate directly the schema of the very application
      text:
        description: prose of the statement, e.g. a citation from the source
        type: string
  Source:
    properties:
      id:
        $ref: "#/definitions/id"
      uri:
        $ref: "#/definitions/uri"
      sameAs:
        $ref: "#/definitions/sameAs"
  id:
    description: the local id of the object (factoid, person, source, statement)
    type: string
  uri:
    description: the uri of the object (factoid, person, source, statement)
    type: string
    #ToDo: uri as type e.g. by pattern?
  sameAs:
    description: the uri of an object (factoid, person, source, statement) referenced with owl:sameAs
    type: string
  Error:
    properties:
      code:
        type: string
      message:
        type: string
responses:
  Standard500ErrorResponse:
    description: An unexpected error occurred.
    schema:
      $ref: "#/definitions/Error"
parameters:
  pageSize:
    name: pageSize
    in: query
    description: sets the  number of objects returned per page
    type: integer
  pageNumber:
    name: pageNumber
    in: query
    description: page number of returned objects
    type: integer
  id:
    name: id
    in: path
    required: true
    type: string
    description: can be either the local id, or the uri or the uri of a owl:sameAs entry
  q:
    name: q
    in: query
    description: query string
    type: string