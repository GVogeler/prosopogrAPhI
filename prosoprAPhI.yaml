swagger: "2.0"

info:
  version: 0.2.0
  title: prosopogrAPhI
  description: basic prosopographical data API
  # contact: georg.vogeler@uni-graz.at
  license:
    name: CC-BY-SA 4.0
    url: https://creativecommons.org/licenses/by-sa/4.0/

schemes:
  - https
  - http
host: localhost
basePath: /api/
produces: # any possibility to describe which of them is default? 
  - application/json #this is default
  #- text/xml
  
paths:

  /factoids:
    get:
      summary: Gets factoids
      description: "Gets an array of `Factoid` objects. The number of array members returned with each response is restricted by the **size** parameter. Factoids can be filtered by setting additional parameters like **personId** or **p**. Factoids are sorted by default by date of create time."
      parameters:
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/personId"
        - $ref: "#/parameters/p"
        - $ref: "#/parameters/statementId"
        - $ref: "#/parameters/st"
        - $ref: "#/parameters/sourceId"
        - $ref: "#/parameters/s"
        - $ref: "#/parameters/f"
        - $ref: "#/parameters/statementContent"
        - $ref: "#/parameters/relatesToPerson"
        - $ref: "#/parameters/memberOf"
        - $ref: "#/parameters/role"
        - $ref: "#/parameters/name"
        - $ref: "#/parameters/from"
        - $ref: "#/parameters/to"
        - $ref: "#/parameters/place"
      responses:
        200:
          description: A list of Factoids
          schema:
            type: array
            items:
              $ref: "#/definitions/Factoid"
        400:
          $ref: "#/responses/BadRequestError"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    head:
      summary: Gets metadata about factoids
      description: "Using the same filtering parameters as GET, it does not return any results, but metadata like the number of factoids etc."
      parameters:
        - $ref: "#/parameters/personId"
        - $ref: "#/parameters/p"
        - $ref: "#/parameters/statementId"
        - $ref: "#/parameters/st"
        - $ref: "#/parameters/sourseId"
        - $ref: "#/parameters/s"
        - $ref: "#/parameters/f"
        - $ref: "#/parameters/statementContent"
        - $ref: "#/parameters/relatesToPerson"
        - $ref: "#/parameters/memberOf"
        - $ref: "#/parameters/role"
        - $ref: "#/parameters/name"
        - $ref: "#/parameters/from"
        - $ref: "#/parameters/to"
        - $ref: "#/parameters/place"
      responses:
        200:
          description: Metadata about the factoids to be returned. *TODO schema has to to be discussed*
#          schema:
#            type: array
#            items:
#              $ref: "#/definitions/Factoid"
        400:
          $ref: "#/responses/BadRequestError"
        500:
          $ref: "#/responses/Standard500ErrorResponse"          
    post:
      summary: "creates a factoid. No Factoid can be created without references to a person, a source, and at least one statement"
      parameters:
        - name: factoid
          in: body
          description: the factoid data
          schema:
            $ref: "#/definitions/Factoid"
      responses:
        201:
          description: factoid created
          #Should return the id of the factoid created
        400:
          description: factoid could not be created or updated
        403:
          description: Forbidden. Missing token or user is not allowed to create persons. 
        500:
          $ref: "#/responses/Standard500ErrorResponse"
        501:
          $ref: "#/responses/NotImplementedError"
          
          
          
  /factoids/{id}:
    get:
      summary: gets the factoid with the {id}
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: a factoid
          schema:
            $ref: "#/definitions/Factoid"
        404:
          description: the factoid does not exist
        500:
          $ref: "#/responses/Standard500ErrorResponse"
# Gunv: POST is not needed here. To force creating a specific id for a resource can be done using put on a non existing
# resource. 
#    post:
#      # ToDo: Authentication!
#      summary: creates the factoid with the {id}
#      parameters:
#        - name: id
#          in: path
#          required: true
#          type: string
#        - name: content
#          in: body
#          schema:
#            $ref: "#/definitions/Factoid"
#      responses:
#        201:
#          description: factoid updated or created
#        400:
#          description: factoid could not be updated or created
#        500:
#          $ref: "#/responses/Standard500ErrorResponse"
#        501:
#          $ref: "#/responses/NotImplementedError"
    put:
      summary: updates the factoid with the {id}
      parameters:
        - $ref: "#/parameters/id"      
        - name: content
          in: body
          schema:
            $ref: "#/definitions/Factoid"
      responses:
        201:
          description: factoid updated
        400:
          description: factoid could not be updated or created. TODO should return reason as message
        403:
          description: Forbidden. Missing token or user is not allowed to create persons. 
        500:
          $ref: "#/responses/Standard500ErrorResponse"
        501:
          $ref: "#/responses/NotImplementedError"
#    patch:
#      description: TODO *I do not think patching factoids makes sense. Has to be discussed!*
#      parameters:
#        - $ref: "#/parameters/id"      
#        - name: content
#          in: body
#          schema:
#            title: part of a factoid
#        
#      responses:
#        501:
#          $ref: "#/responses/NotImplementedError"        
#          
          
          
  /persons:
    get:
      summary: Get persons
      description: Gets a list of `Person` objects.
                   The number of array members returned with each response is restricted by the **size** parameter. 
                   Persons can be filtered by setting additional parameters like **factoidId** or **f**. TODO Further 
                   parameters for filtering have to be specified.      
      parameters:
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/sortBy"
        - $ref: "#/parameters/p"
        - $ref: "#/parameters/factoidId"
        - $ref: "#/parameters/f"
        - $ref: "#/parameters/statementId"
        - $ref: "#/parameters/st"
        - $ref: "#/parameters/sourceId"
        - $ref: "#/parameters/s"
        - $ref: "#/parameters/statementContent"
        - $ref: "#/parameters/relatesToPerson"
        - $ref: "#/parameters/memberOf"
        - $ref: "#/parameters/role"
        - $ref: "#/parameters/name"
        - $ref: "#/parameters/from"
        - $ref: "#/parameters/to"
        - $ref: "#/parameters/place"
      responses:
        200:
          description: Successfull response
          schema:
            title: Array of Person objects
            type: array
            items:
              $ref: "#/definitions/Person"
        400: 
          $ref: "#/responses/BadRequestError"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
           
    head:
      summary: Get metadata about persons
      description: Uses the same filtering parameters as GET, but does not return any results, but metadata like the number of persons found etc.
                   TODO *I'm not sure if we really need this and what metadata will be useful beside the total number of
                   available persons*
                   TODO *Possibly this could replace the describe uris?*
      parameters:
        - $ref: "#/parameters/p"
        - $ref: "#/parameters/factoidId"
        - $ref: "#/parameters/f"
        - $ref: "#/parameters/statementId"
        - $ref: "#/parameters/st"
        - $ref: "#/parameters/sourceId"
        - $ref: "#/parameters/s"
        - $ref: "#/parameters/statementContent"
        - $ref: "#/parameters/relatesToPerson"
        - $ref: "#/parameters/memberOf"
        - $ref: "#/parameters/role"
        - $ref: "#/parameters/name"
        - $ref: "#/parameters/from"
        - $ref: "#/parameters/to"
        - $ref: "#/parameters/place"
      responses:
        200:
          description: Metadata about the factoids to be returned. *TODO schema has to to be discussed*                      
        400:
          $ref: "#/responses/BadRequestError"
        500:
          $ref: "#/responses/Standard500ErrorResponse"                
    post:
      summary: Add a new person
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Person"
      responses:
        201:
          description: Person created
          #FixMe: Should return the id of the created person or the whole person object?
          headers:
            Location: 
              description: the uri of the created person
              type: string
          schema:
            $ref: "#/definitions/Person"
        400:
          $ref: "#/responses/BadRequestError"
        403:
          description: Forbidden. Missing token or user is not allowed to create persons. 
        500:
          $ref: "#/responses/Standard500ErrorResponse"
        501:
          $ref: "#/responses/NotImplementedError"
          

  /persons/{id}:
    get:
      summary: gets the person with the {id}
      parameters:
        - $ref: "#/parameters/id"      
      responses:
        200:
          description: a person object
          schema:
            $ref: "#/definitions/Person"
        404:
          description: the person does not exist
        500:
          $ref: "#/responses/Standard500ErrorResponse"

    put:
      # ToDo: Authentication!
      summary: updates the person with the {id}
      parameters:
        - $ref: "#/parameters/id"      
        - name: content
          in: body
          description: the person data
          schema:
            $ref: "#/definitions/Person"
      responses:
        201:
          description: person updated
        400:
          description: person could not be updated or created. TODO should return reason as message
        403:
          description: Forbidden. Missing token or user is not allowed to create persons. 
        500:
          $ref: "#/responses/Standard500ErrorResponse"
        501:
          $ref: "#/responses/NotImplementedError"
#    patch:
#      description: TODO *I do not think patching persons makes sense. Has to be discussed!*
#      parameters:
#        - $ref: "#/parameters/id"
#        - name: content
#          in: body
#          schema:
#            title: part of a person
#     
#      responses:
#        501:
#          $ref: "#/responses/NotImplementedError"        


          
  # Gunv: This should be part of factoids!
  #/persons/{id}/factoids:
  #  get:
  #    summary: get all factoids about the person with the {id}
  #    parameters:
  #      - $ref: "#/parameters/id"
  #    responses:
  #      200:
  #        description: a list of factoids
  #        schema:
  #          $ref: "#/definitions/Factoid"
  #      500:
  #        $ref: "#/responses/Standard500ErrorResponse"
  
  
  
  /sources:
    get:
      summary: gets a list of sources
      description: Gets a list of `Source` objects.
                   The number of array members returned with each response is restricted by the **size** parameter. 
                   Sources can be filtered by setting additional parameters like **factoidId** or **f**. TODO Further 
                   parameters for filtering have to be specified.      
      parameters:
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/sortBy"
        - $ref: "#/parameters/personId"
        - $ref: "#/parameters/p"
        - $ref: "#/parameters/factoidId"
        - $ref: "#/parameters/f"
        - $ref: "#/parameters/st"
        - $ref: "#/parameters/statementContent"
        - $ref: "#/parameters/relatesToPerson"
        - $ref: "#/parameters/memberOf"
        - $ref: "#/parameters/role"
        - $ref: "#/parameters/name"
        - $ref: "#/parameters/from"
        - $ref: "#/parameters/to"
        - $ref: "#/parameters/place"
      responses:
        200:
          description: Successfull response
          schema:
            title: Array of Source objects
            type: array
            items:
              $ref: "#/definitions/Source"
        400: 
          $ref: "#/responses/BadRequestError"
      
        500:
          $ref: "#/responses/Standard500ErrorResponse"
          
    head:
      summary: gets a list of sources
      description: Uses the same filtering parameters as GET, but does not return any results, but metadata like the number of sources found etc.
                   TODO *I'm not sure if we really need this and what metadata will be useful beside the totel number of
                   available sources*
                   TODO *Possibly this could replace the describe uris?*
      parameters:
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/sortBy"
        - $ref: "#/parameters/personId"
        - $ref: "#/parameters/p"
        - $ref: "#/parameters/factoidId"
        - $ref: "#/parameters/f"
        - $ref: "#/parameters/statementId"
        - $ref: "#/parameters/st"
        - $ref: "#/parameters/statementContent"
        - $ref: "#/parameters/relatesToPerson"
        - $ref: "#/parameters/memberOf"
        - $ref: "#/parameters/role"
        - $ref: "#/parameters/name"
        - $ref: "#/parameters/from"
        - $ref: "#/parameters/to"
        - $ref: "#/parameters/place"
      responses:
        200:
          description: Metadata about the factoids to be returned. *TODO schema has to to be discussed*                      
        400:
          $ref: "#/responses/BadRequestError"
        500:
          $ref: "#/responses/Standard500ErrorResponse"                
    post:
      summary: Add a new source
      parameters:
        - name: body
          in: body
          description: the source data
          schema:
            $ref: "#/definitions/Source"
      responses:
        201:
          description: Source created
          #FixMe: Should return the id of the created source or the whole source object?
          headers:
            Location: 
              description: the uri of the created source
              type: string
          schema:
            $ref: "#/definitions/Source"
        400:
          $ref: "#/responses/BadRequestError"
        403:
          description: Forbidden. Missing token or user is not allowed to create persons. 
        500:
          $ref: "#/responses/Standard500ErrorResponse"
        501:
          $ref: "#/responses/NotImplementedError"

          
  /sources/{id}:
    get:
      summary: gets the source with the {id}
      parameters:
        - $ref: "#/parameters/id"      
      responses:
        200:
          description: a source object
          schema:
            $ref: "#/definitions/Source"
        404:
          description: the source does not exist
        500:
          $ref: "#/responses/Standard500ErrorResponse"

    put:
      # ToDo: Authentication!
      summary: updates the source with the {id}
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: content
          in: body
          description: the source data
          schema:
            $ref: "#/definitions/Source"
      responses:
        201:
          description: source updated
        400:
          description: source could not be updated or created. TODO should return reason as message
        403:
          description: Forbidden. Missing token or user is not allowed to create sources. 
        500:
          $ref: "#/responses/Standard500ErrorResponse"
        501:
          $ref: "#/responses/NotImplementedError"
#    patch:
#      description: TODO *I do not think patching persons makes sense. Has to be discussed!*
#      parameters:
#        - name: id
#          in: path
#          required: true
#          type: string
#        - name: content
#          in: body
#          schema:
#            title: part of a source
#        
#      responses:
#        501:
#          $ref: "#/responses/NotImplementedError"        


  /statements:
    get:
      summary: gets a list of statements
      description: Gets a list of `Statement` objects.
                   The number of array members returned with each response is restricted by the **size** parameter. 
                   Statements can be filtered by setting additional parameters like **factoidId** or **f**. TODO Further 
                   parameters for filtering have to be specified.      
      parameters:
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/sortBy"
        - $ref: "#/parameters/personId"
        - $ref: "#/parameters/factoidId"
        - $ref: "#/parameters/f"
        - $ref: "#/parameters/sourceId"
        - $ref: "#/parameters/st"
        - $ref: "#/parameters/p"
        - $ref: "#/parameters/statementContent"
        - $ref: "#/parameters/relatesToPerson"
        - $ref: "#/parameters/memberOf"
        - $ref: "#/parameters/role"
        - $ref: "#/parameters/name"
        - $ref: "#/parameters/from"
        - $ref: "#/parameters/to"
        - $ref: "#/parameters/place"
      responses:
        200:
          description: Successfull response
          schema:
            title: Array of Statement objects
            type: array
            items:
              $ref: "#/definitions/Statement"
        400: 
          $ref: "#/responses/BadRequestError"
      
        500:
          $ref: "#/responses/Standard500ErrorResponse"
          
    head:
      summary: gets a list of statements
      description: Uses the same filtering parameters as GET, but does not return any results, but metadata like the number of statements 
                   found etc.
                   TODO *I'm not sure if we really need this and what metadata will be useful beside the totel number of
                   available sources*
                   TODO *Possibly this could replace the describe uris?*
      parameters:
        - $ref: "#/parameters/size"
        - $ref: "#/parameters/page"
        - $ref: "#/parameters/sortBy"
        - $ref: "#/parameters/personId"
        - $ref: "#/parameters/p"
        - $ref: "#/parameters/factoidId"
        - $ref: "#/parameters/f"
        - $ref: "#/parameters/st"
        - $ref: "#/parameters/statementContent"
        - $ref: "#/parameters/relatesToPerson"
        - $ref: "#/parameters/memberOf"
        - $ref: "#/parameters/role"
        - $ref: "#/parameters/name"
        - $ref: "#/parameters/from"
        - $ref: "#/parameters/to"
        - $ref: "#/parameters/place"
      responses:
        200:
          description: Metadata about the statements to be returned. *TODO schema has to to be discussed*                      
        400:
          $ref: "#/responses/BadRequestError"
        500:
          $ref: "#/responses/Standard500ErrorResponse"                
    post:
      summary: Add a new statement
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/Statement"
      responses:
        201:
          description: Statement created
          #FixMe: Should return the id of the created source or the whole source object?
          headers:
            Location: 
              description: the uri of the created statement
              type: string
          schema:
            $ref: "#/definitions/Statement"
        400:
          $ref: "#/responses/BadRequestError"
        403:
          description: Forbidden. Missing token or user is not allowed to create statement. 
        500:
          $ref: "#/responses/Standard500ErrorResponse"
        501:
          $ref: "#/responses/NotImplementedError"

          
  /statements/{id}:
    get:
      summary: gets the statement with the {id}
      parameters:
        - $ref: "#/parameters/id"      
      responses:
        200:
          description: a statement object
          schema:
            $ref: "#/definitions/Statement"
        404:
          description: the statement does not exist
        500:
          $ref: "#/responses/Standard500ErrorResponse"

    put:
      # ToDo: Authentication!
      summary: updates the statement with the {id}
      parameters:
        - $ref: "#/parameters/id"      
        - name: content
          in: body
          schema:
            $ref: "#/definitions/Statement"
      responses:
        201:
          description: statement updated
        400:
          description: statement could not be updated or created. TODO should return reason as message
        403:
          description: Forbidden. Missing token or user is not allowed to create statements. 
        500:
          $ref: "#/responses/Standard500ErrorResponse"
        501:
          $ref: "#/responses/NotImplementedError"
#    patch:
#      description: TODO *I do not think patching statements makes sense. Has to be discussed!*
#      parameters:
#        - $ref: "#/parameters/id"      
#        - name: content
#          in: body
#          schema:
#            title: part of a statement
#        
#      responses:
#        501:
#          $ref: "#/responses/NotImplementedError"        

#  /describe:
#    get:
#      description: Gives basic information about schemas used, numbers of entries and implementation of API
#             TODO *This could possibly be handled via HEAD request?* 
#      responses:
#        500:
#         $ref: "#/responses/Standard500ErrorResponse"
#  /describe/statement/schema:
#    get:
#      description: The schema used to describe the statements
#      responses:
#        200:
#          description: "A URL pointing to the @context for the JSON-LD used in graph respones"
#          schema:
#            type: string
#        500:
#          $ref: "#/responses/Standard500ErrorResponse"
#  /describe/return/schemas:
#    get:
#      description: The schemas supported by the server as return values
#      responses:
#        500:
#          $ref: "#/responses/Standard500ErrorResponse"
#  /describe/return/formats:
#    get:
#      description: The vocabularies supported by the server for return values, default is JSON
#      responses:
#        #200:
#        ## ToDo: give an enumarted list included default
#        # covered already by "produces:"
#        500:
#          $ref: "#/responses/Standard500ErrorResponse"
#  /describe/source/schema:
#    get:
#      description: The schema used to describe the source
#      responses:
#        200:
#          description: "a URL pointing to the @context for the JSON-LD used in descriptions of sources"
#          schema:
#            type: string
#        500:
#          $ref: "#/responses/Standard500ErrorResponse"

definitions:
  Factoid:
    description: "A Factoid is a composite of one or more statements about a person extracted by somebody from a source at a specific time."
    type: object
    #type: string    
    items:
      required:
        - id
        - person
        - source
        - statements
        - createdBy
        - createdWhen
      properties:
        id:
          $ref: "#/definitions/id"
        persons:
          type: array
          items:
            $ref: "#/definitions/Person"
        statements:
          type: array
          items:
            $ref: "#/definitions/Statement"
        source:
          $ref: "#/definitions/Source"
        createdBy:
          $ref: "#/definitions/createdBy"
        createdWhen:
          $ref: "#/definitions/createdWhen"
        modifiedBy:
          $ref: "#/definitions/modifiedBy"
        modifiedWhen:
          $ref: "#/definitions/modifiedWhen"
        derivedFrom:
          description: "references the URI of a factoid on which this factoid is based."
          type: string 
          format: uri
      example:
        - id: TW_Pez1_809_1 
          person: Andreas_Reuter
          statements: 
            - id: Pez1_809_1
              statementContents: 
                -
                  label: "Andreas Reuter (ca. 1648 Kremsmünster – 1715 Gleink) war Konventuale von Gleink. Er war Doktor der Theologie, apostolischer Protonotar und wirkte in Gleink als Ökonom sowie insgesamt 22 Jahre lang als Prior. Als solcher begegnet er 1708 als Unterzeichner der Rotel auf Abt Rupert von Kimpflern und 1710 in seinem Brief an Bernhard Pez."
          source: PezNachlassVol1
          createdBy: Thomas Wallnig
          createdWhen: 2010-05-05
          modifiedBy: Thomas Wallnig
          modifiedWhen: 2010-05-05
        - id: TW_Pez1_123456
          person: Placidus_Seiz
          statements: 
            - id: Pez#474-7,
              statementContents: 
                -
                  label: ... , quam accepturum me spero a reverendissimo domino abbate Ettalensi ...
          source: "Pez#474"
          createdBy: Thomas Wallnig
          createdWhen: 2007-04-16
          modifiedBy: Thomas Wallnig
          modifiedWhen: 2007-04-16
        - id: TW_Pez1_123456
          person: Placidus_Seiz
          statements: 
            id: person1241
            name: Placidus Seitz
            uri: http://pez-digital.at/placidus_Seiz
          source: "Lindner-Album_Ettalense253f."
          createdBy: Thomas Wallnig
          createdWhen: 2007-04-16
          modifiedBy: Thomas Wallnig
          modifiedWhen: 2007-07-01
        - id: Fd2qwr
          person: Andreas_Reuter
          statements: 
            - id: Fd2qwr
              date: 
                sortdate: 1648-06-15
                label: ca. 1648
              statementContents:
                -
                  label: Geburt
              places: 
                -
                  label: Kremsmünster
            - id: Pez1_809_1
              statementContents: 
                -
                  label: Death
              date:
                sortdate: 1715-12-31
                label: 1715
              places:
                -
                  label: Gleink
            - id: Pez1_809_2
              statementContents:
                -
                  uri: "http://religiouspeople.org/rdf/#conventmember"
                  label: Konventuale
              places:
                -
                  label: Gleink
            - id: Pez1_809_3
              statementContents: 
                - 
                  label: Doktor der Theologie
            - id: Pez1_809_4
              statementContents: 
                -
                  label: apostolischer Protonotar
            - id: Pez1_809_5
              statementContents: 
                -
                  label: Ökonom des Klosters
              places: 
                -
                  label: Gleink
            - id: Pez1_809_6
              statementContents: 
                -
                  label: Prior
              places: 
                -
                  uri: "http://sws.geonames.org/2778486/"
                  label: Gleink
            - id: Pez1_809_7
              statementContents: 
                -
                  label: Prior (belegt als)
              places: 
                -
                  label: Gleink
              date:
                sortdate: 1708-01-01
            - id: Pez1_809_7
              statementContents: 
                -
                  label: Unterzeichner der Rotel auf Abt Rupert von Kimpflern 
              places: 
                -
                  label: Gleink
              date:
                sortdate: 1708-01-01
                label: 1708
              relatesToPersons:
                - 
                  label: Abt Rupert von Kimpflern
            - id: Pez1_809_8
              statementContents: 
                - 
                  label: Brief an Bernhard Pez 
              date:
                sortdate: 1710-01-01
                label: 1710
              relatesToPersons:
                - 
                  label: Bernhard Pez
          source: PezNachlassVol1
          createdBy: Thomas Wallnig
          createdWhen: 2010-05-05
          modifiedBy: Thomas Wallnig
          modifiedWhen: 2010-05-05
  Person:
    type: object
    description: A Person is an abstract entity representing a human individual (fictional or historical) independet from their cultural desciption by name, status, social relationsships etc. It has therefore only formal identifiers as properties.
    required:
      - id
    properties:
      id:
        $ref: "#/definitions/id"
      uris:
        $ref: "#/definitions/uris"
      createdBy:
        $ref: "#/definitions/createdBy"
      createdWhen:
        $ref: "#/definitions/createdWhen"
      modifiedBy:
        $ref: "#/definitions/modifiedBy"
      modifiedWhen:
        $ref: "#/definitions/modifiedWhen"
    example:
      - id: Andreas_Reuter
      - uris: "http://pez-digital.at/persons#Mauro_Aspini"
      - id: Placidus_Seiz
        uris: 
          - http://d-nb.info/gnd/10102407X
          - https://viaf.org/viaf/5285530/
  Statement:
    type: object
    description: "The statement object gives human and machine readable information on the person(s) listed in the factoid."  
    required:
      - id
    properties:
      id:
        $ref: "#/definitions/id"
      uri:
        type: string
        format: uri
        description: "A fully dereferencably URI representing the statement. The API recommends to serve requests for serialisations of W3C RDF via this URI."
      statementType:
        type: object
        properties:
          uri:
            type: string
            format: uri
            description: "A fully dereferencably URI, which could be an endpoint to RESTful API for the applied taxonomy"
          label:
            type: string
            description: "descriptive text. We can imagine this to be a term from a controlled vocabulary, a short type name or more verbose description including the wording from the source or a short biogram."
      statementContent:
        type: string
        description: "describes the statement in more detail: e.g. which type of event, what type of relationship, but can also report citations from source or descriptive prose."
      name:
        type: string
        description: "any verbal identification of a person"
      role:
        type: object
        description: "describes the role of the person in the statement. If empty it is considered generically as 'participates in something which could be an event'"
        properties:
          uri:
            type: string
            format: uri
            description: "A fully dereferencably URI, which could be an endpoint to RESTful API for the applied taxonomy"
          label:
            type: string
            description: "descriptive text of the role of the person in the statement."      
      date:
        type: object
        description: "The temporal allocation of the statement: To which time frame the statement on the person applies?"
        properties:
          sortdate:
            type: string
            format: date
            description: "Formal version of the date following W3C recommendations. This date is not expected to represent the full range of possible dating. Use the label property to describe the date in more detail dates by century, by year, time ranges, date not before/not after, and similar."
          label:
            type: string
            description: "verbal version of the date, which should enable the human reader to get an idea of the chronological concept."
      places:
        description: "describes the geographical information of the statement, e.g. the place where an event happened, the geographic coverage of a social role etc."
        type: array
        items:
            type: object
            properties:
              uri:
                type: string
                format: uri
                description: "reference to geo-referenceable object (e.g. single place), preferably an endpoint of an RESTful API serving coordinates of a single place or a polygon together with information on projection used."
              label:
                type: string
                description: "verbal reference to geo-referenceable object, e.g. name of a city, name of an area."
      relatesToPersons:
        description: "relationships of the person on which the statement is made to other persons."
        type: array
        items:
          type: object
          properties:
            uri:
              type: string
              format: uri
              description: "reference to a machine readably object on a person, preferably an endpoint following the definitions of this API."
            label:
              type: string
              description: "a human readable description of the person to which the statement relates the persons referenced in the factoid, e.g. the name of the person"
      memberOf:
        type: object
        description: "relationship of the person on which the statement is made to institutions or groups of persons identifiable."
        properties:
          uri:
            type: string
            format: uri
          label:
            type: string
            description: "a human readable description of the group/institution to which the statement relates the persons referenced in the factoid"
      createdBy:
        $ref: "#/definitions/createdBy"
      createdWhen:
        $ref: "#/definitions/createdWhen"
      modifiedBy:
        $ref: "#/definitions/modifiedBy"
      modifiedWhen:
        $ref: "#/definitions/modifiedWhen"
  Source:
    required:
      - id
    properties:
      id:
        $ref: "#/definitions/id"
      uri:
        $ref: "#/definitions/uri"
      label:
        description: "A human readable description of the source of information for the factoid, e.g. a bibliographic reference, an archival shelfmark etc."
        type: string
      uris:
        $ref: "#/definitions/uris"
      createdBy:
        $ref: "#/definitions/createdBy"
      createdWhen:
        $ref: "#/definitions/createdWhen"
      modifiedBy:
        $ref: "#/definitions/modifiedBy"
      modifiedWhen:
        $ref: "#/definitions/modifiedWhen"
    example:
      - id: PezNachlassVol1
        uris: 
          - https://e-book.fwf.ac.at/o:370
        metadata: "Die gelehrte Korrespondenz der Brüder Pez, Text, Regesten, Kommentare; Band 1: 1709–1715, bearb. v. Thomas Wallnig u. Thomas Stockinger, Wien u. Köln: Böhlau, 2010"
      - id: "Pez#474"
        metadata: "Melk, Stiftsarchiv, Kt. 07 Patres 07, II, 673r-675v"
      - id: "Lindner-Album_Ettalense253f."
        metadata: "Lindner: Album Ettalense, S. 253f."
  id:
    description: "the local id of the object (factoid, person, source, statement)"
    type: string
  uri:
    description: "the uri of the object (factoid, person, source, statement, etc.). The API recommends to use endpoints of a RESTful API which gives further machine readable information on the object."
    type: string
    format: uri
  uris:
    description: "a list of uris of an object (factoid, person, source, statement, etc.) referenced with owl:sameAs"
    type: array
    items:
      $ref: "#/definitions/uri"
  createdBy:
    type: string
    description: "The user responsbile for a creation of the object. A group of persons is represented by a comma seperated list."
  createdWhen:
    description: ""
    type: string
    format: date
  modifiedBy:
    type: string
    description: "The user responsbile for a modification of the object. A group of persons is represented by a comma seperated list."
  modifiedWhen:
    description: ""
    type: string
    format: date
  Error:
    properties:
      code:
        type: string
      message:
        type: string
responses:
  BadRequestError:
    description: "Bad request. Caused by unknown parameters or illegal parameter values"
    schema:
      $ref: "#/definitions/Error"
  Standard500ErrorResponse:
    description: "An unexpected error occurred." #GunV: I'm not sure if we need this in the API as a 500 could occur anytime and for many reasons and should normaly not expose the reason to the public. The typical message would be something like the standard "Internal Server Error".
    schema:
      $ref: "#/definitions/Error"
  NotImplementedError:
    description: "Functionality not implemented. Some implementations will only support read operations. For any data modifying request they must return a 501 response."
    schema:
      $ref: "#/definitions/Error"
parameters:
  size:
    name: size
    in: query
    description: "sets the  number of objects returned per page."
    type: integer
    default: 30
  page:
    name: page
    in: query
    default: 1
    description: "Sets the page number of returned objects. If size is set to 10 and page is set to 2, the objects 11-20 will be returned."
    type: integer
  id:
    name: id
    in: path
    required: true
    type: string
    description: "can be either the local id, or the uri or the uri of a owl:sameAs entry"
  sortBy:
    name: sortBy
    type: string
    in: query
    description: "defines the sort order of the requested resource, can contain all properties of the resource searched. The closing keywords 'ASC' and 'DESC' describe the sort order as 'ASCending' and 'DESCending'. In case the property is a list of values, use the first item."
    default: "createdWhen"
  personId:
    name: personId
    type: string
    in: query
    description: filter by person id
  p:
    name: p
    type: string
    in: query
    description: "filter by applying a pattern on persons (fulltext search)"
  statementId:
    name: statementId
    type: string
    in: query
    description: "filter by statement id"
  st:
    name: st
    type: string
    in: query
    description: "filter by applying a pattern on statements (fulltext search)"
  sourceId:
    name: sourceId
    type: string
    in: query
    description: "filter by source id"
  s:
    name: s
    type: string
    in: query
    description: "filter by applying a pattern on sources (fulltext search)"
  f:
    name: f
    type: string
    in: query
    description: "filter by applying a pattern on factoid (fulltext search)"
  factoidId:
    name: factoidId
    type: string
    in: query
    description: "filter by factoid id"
  statementContent:
    name: statementContent
    type: string
    in: query
    description: "could be URI or label"
  role:
    name: role
    type: string
    in: query
    description: "could be URI or label"
  from:
    name: from
    type: string
    in: query
    description: "all dates after the event date (including the event date) will be included. If `from` and `to` are the same, only a single exact date is included. Fragments (yyyy, yyyy-mm) will be interpreted as exact time ranges if the second parameter is missing (`from=yyyy-mm` is interpreted as `from=start of month`, `to=end of month`. If conflicting data is present, for example ``from=yyyy&to=yyyy-mm-dd`, the most correct interpretation will be decided on by the backend. For instance, the example before will be interpreted as `from=yyyy-01-01&to=yyyy-mm-dd`."
  to:
    name: to
    type: string
    in: query
    description: "all dates before the event date (including the event date) will be included. If `from` and `to` are the same, only a single exact date is included. Fragments (yyyy, yyyy-mm) will be interpreted as exact time ranges if the second parameter is missing (`from=yyyy-mm` is interpreted as `from=start of month`, `to=end of month`. If conflicting data is present, for example ``from=yyyy&to=yyyy-mm-dd`, the most correct interpretation will be decided on by the backend. For instance, the example before will be interpreted as `from=yyyy-01-01&to=yyyy-mm-dd`."
  place:
    name: place
    type: string
    in: query
    description: "could be URI or label"
  relatesToPerson:
    name: relatesToPerson
    type: string
    in: query
    description: "could be URI or label"
  memberOf:
    name: memberOf
    type: string
    in: query
    description: "could be URI or label"
  name:
    name: name
    type: string
    in: query
    description: "names of a person"
  createdBefore:
    name: createdBefore
    type: string
    in: query
  createdAfter:
    name: createdAfter
    type: string
    in: query
  createdBy:
    name: createdBy
    type: string
    in: query
    description: "Filters by full text search in the description of the user responsbile for the creation of the object. A group of persons is represented by a comma seperated list."
  modifiedBefore:
    name: createdBefore
    type: string
    in: query
  modifiedAfter:
    name: createdAfter
    type: string
    in: query
  modifiedBy:
    name: createdBy
    type: string
    in: query
    description: "Filters by full text  search in the description of the user responsbile for a modification of the object. A group of persons is represented by a comma seperated list."
