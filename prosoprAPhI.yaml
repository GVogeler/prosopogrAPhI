swagger: "2.0"

info:
  version: 0.1.0
  title: prosopogrAPhI
  description: basic prosopographical data API
  # contact: georg.vogeler@uni-graz.at
  # licence 

schemes:
  - https
  - http
host: www.cei.lmu.de
basePath: /prosopographi/api.0.1
produces:
  - application/json
  - text/xml
  
paths:
  /factoid:
    get:
      summary: Gets factoids
      description: Gets a list of factoids.
      parameters:
        - $ref: "#/parameters/pageSize"
        - $ref: "#/parameters/pageNumber"
      responses:
        200:
          description: a list of Factoid
          schema:
            type: array
            items:
              $ref: "#/definitions/Factoid"
        404:
          description: no factoid found
          #ToDo: not found näher definieren
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    post:
      # ToDo: Authentication!
      summary: creates a factoid
      parameters:
        - name: factoid
          in: body
          description: the factoid
          schema:
            $ref: "#/definitions/Factoid"
      responses:
        204:
          description: factoid created
          #Should return the id of the factoid created
        400:
          description: factoid could not be created or updated
        500:
          $ref: "#/responses/Standard500ErrorResponse"
        501:
          $ref: "#/responses/NotImplementedError"
  /factoid/{id}:
    get:
      summary: gets the factoid with the {id}
      parameters:
        - name: id
          in: path
          required: true
          description: can be either the local id, or the uri
          type: string
      responses:
        200:
          description: a factoid
          schema:
            $ref: "#/definitions/Factoid"
        404:
          description: the factoid does not exist
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    post:
      # ToDo: Authentication!
      summary: creates the factoid with the {id}
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: content
          in: body
          schema:
            $ref: "#/definitions/Factoid"
      responses:
        204:
          description: factoid updated or created
        400:
          description: factoid could not be updated or created
        500:
          $ref: "#/responses/Standard500ErrorResponse"
        501:
          $ref: "#/responses/NotImplementedError"
    put:
      # ToDo: Authentication!
      summary: updates the factoid with the {id}
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: content
          in: body
          schema:
            $ref: "#/definitions/Factoid"
      responses:
        204:
          description: factoid updated
        400:
          description: factoid could not be updated or created
        500:
          $ref: "#/responses/Standard500ErrorResponse"
        501:
          $ref: "#/responses/NotImplementedError"
  # ToDo: Which subpaths do we need, e.g.
  #  getting only the person, statement, source of factoid to enhance walk through?
  #  sort order? maybe as path
  /person:
    get:
      summary: get a list of persons
      responses:
        default:
          description: test
          schema:
            type: array
            items:
              $ref: "#/definitions/Person"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
    post:
      summary: creates a person with
      responses:
        204:
          description: creates a person
          #FixMe: Should return the id of the created person
          schema:
            $ref: "#/definitions/Factoid"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
        501:
          $ref: "#/responses/NotImplementedError"
  /person/{id}/factoids:
    get:
      summary: get all factoids about the person with the {id}
      parameters:
        - $ref: "#/parameters/id"
      responses:
        200:
          description: a list of factoids
          schema:
            $ref: "#/definitions/Factoid"
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /source:
    get:
      summary: gets a list of sources
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /source/{id}:
    get:
      summary: gets the source with the given {id}
      parameters:
        - $ref: "#/parameters/id"
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /source/search:
    #Do we need a "search" path, or can we replace it by ?q-Parameter?
    get:
      summary: full text search in all literal content of the source description
      # ToDo: Or search in all factoids based on this source?
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /search:
    #Do we need a "search" path, or can we replace it by ?q-Parameter?
    get:
      summary: full text search in all literal content
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /describe:
    get:
      description: gives basic information about schemas used, numbers of entries and implementation of API
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /describe/statement/schema:
    get:
      description: the schema used to describe the statements
      responses:
        200:
          description: "a URL pointing to the @context for the JSON-LD used in graph respones"
          schema:
            type: string
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /describe/return/schemas:
    get:
      description: the schemas supported by the server as return values
      responses:
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /describe/return/formats:
    get:
      description: the serialisations supported by the server for return values, default is JSON
      responses:
        #200:
        ## ToDo: give an enumarted list included default
        500:
          $ref: "#/responses/Standard500ErrorResponse"
  /describe/source/schema:
    get:
      description: the schema used to describe the source
      responses:
        200:
          description: "a URL pointing to the @context for the JSON-LD used in descriptions of sources"
          schema:
            type: string
        500:
          $ref: "#/responses/Standard500ErrorResponse"

definitions:
  Factoid:
    # FPO calls this "assertion" ?
    description: A Factoids is a composite of one or more statements about a person extracted by somebody from a source at a specific time
    type: object
    items:
      required:
        - id
        - person
        - source
        - statement
      properties:
        id:
          $ref: "#/definitions/id"
        person:
          $ref: "#/definitions/Person"
        statement:
          $ref: "#/definitions/Statement"
        source:
          $ref: "#/definitions/Source"
        metadata:
          description: metadata describing the creation event of the factoid
          type: object
          items:
            properties:
              createdBy:
                type: string
              createdWhen:
                type: string # date ? 
      example:
        - id: TW_Pez1_809_1 
          person: Andreas_Reuter
          statement: 
            - id: Pez1_809_1
              text: "Andreas Reuter (ca. 1648 Kremsmünster – 1715 Gleink) war Konventuale von Gleink. Er war Doktor der Theologie, apostolischer Protonotar und wirkte in Gleink als Ökonom sowie insgesamt 22 Jahre lang als Prior. Als solcher begegnet er 1708 als Unterzeichner der Rotel auf Abt Rupert von Kimpflern und 1710 in seinem Brief an Bernhard Pez."
          source: PezNachlassVol1
          metadata:
            createdBy: Thomas Wallnig
            createdWhen: 2010
        - id: TW_Pez1_123456
          person: Placidus_Seiz
          statement: 
            - id: "Pez#474-7"
              text: "... , quam accepturum me spero a reverendissimo domino abbate Ettalensi ..."
          source: "Pez#474"
          metadata:
            createdBy: Thomas Wallnig
            createdWhen: 2007-04-16
        - id: TW_Pez1_123456
          person: Placidus_Seiz
          statement: 
            - graph:
              - "@context" : "http://pez-digital.at/prosopography-schema.json-ld"
                "@graph": 
                  - "@id" : "http://pez-digital.at/Lindner-Album_Ettalense253f"
                    "assignedTo" : 
                      - "@id" : "http://pez-digital.at/placidus_Seiz"
                    "hasName" :  
                      - "@value" : "Placidus Seitz"
          source: "Lindner-Album_Ettalense253f."
          metadata:
            createdBy: Thomas Wallnig
            createdWhen: 2007-04-16
  Person:
    description: a Person is an abstract entity representing a human individual (fictional or historical) independet from their cultural desciption by name, status, social relationsships etc. It has therefore only formal identifiers as properties.
    properties:
      id:
        $ref: "#/definitions/id"
      uri:
        $ref: "#/definitions/uri"
      sameAs:
        $ref: "#/definitions/sameAs"
    example:
      - id: Andreas_Reuter
      - uri: "http://pezdigital/persons#Mauro_Aspini"
      - id: Placidus_Seiz
        sameAs: 
          http://d-nb.info/gnd/10102407X
          https://viaf.org/viaf/5285530/
  Statement:
    # FPO calls this factoid?
    properties:
      id:
        $ref: "#/definitions/id"
      text:
        type: string
      graph:
        description: "The object describing representing the statement as a graph follwos these rules: 
          1. Every path possible in the graph has to be linked to the person described by the factoid via steps explicitly expressed in the graph.
          2. All types and properties used in the graph can be mapped to a superclass taken from the CIDOC-CRM. These relationships are formaly described as a schema which can be accessed via the /describe/statement/schema path of the API."
        type: object
    example:
      - id: Pez1_809_1
        text: "Andreas Reuter (ca. 1648 Kremsmünster – 1715 Gleink) war Konventuale von Gleink. Er war Doktor der Theologie, apostolischer Protonotar und wirkte in Gleink als Ökonom sowie insgesamt 22 Jahre lang als Prior. Als solcher begegnet er 1708 als Unterzeichner der Rotel auf Abt Rupert von Kimpflern und 1710 in seinem Brief an Bernhard Pez."
      - graph:
          - "@context" : "http://pez-digital.at/prosopography-schema.json-ld"
            "@graph": 
            - "@id" : "http://pez-digital.at/Lindner-Album_Ettalense253f"
              "assignedTo" : 
              - "@id" : "http://pez-digital.at/placidus_Seiz"
              "hasName" :  
              - "@value" : "Placidus Seitz"
  Source:
    required: 
      - metadata
    properties:
      id:
        $ref: "#/definitions/id"
      uri:
        $ref: "#/definitions/uri"
      sameAs:
        $ref: "#/definitions/sameAs"
      metadata:
        description: a verbal or formal bibliographical/archival description of the source
        type: string
        # Allow string or structured metadata
    example:
      - id: PezNachlassVol1
        sameAs: https://e-book.fwf.ac.at/o:370
        metadata: "Die gelehrte Korrespondenz der Brüder Pez, Text, Regesten, Kommentare; Band 1: 1709–1715, bearb. v. Thomas Wallnig u. Thomas Stockinger, Wien u. Köln: Böhlau, 2010"
      - id: "Pez#474"
        metadata: "Melk, Stiftsarchiv, Kt. 07 Patres 07, II, 673r-675v"
      - id: "Lindner-Album_Ettalense253f."
        metadata: "Lindner: Album Ettalense, S. 253f."
  id:
    description: the local id of the object (factoid, person, source, statement)
    type: string
  uri:
    description: the uri of the object (factoid, person, source, statement)
    type: string
    #ToDo: uri as type e.g. by pattern?
  sameAs:
    description: the uri of an object (factoid, person, source, statement) referenced with owl:sameAs
    type: string
  Error:
    properties:
      code:
        type: string
      message:
        type: string
responses:
  Standard500ErrorResponse:
    description: An unexpected error occurred.
    schema:
      $ref: "#/definitions/Error"
  NotImplementedError:
    description: functionality not yet implemented
    schema:
      $ref: "#/definitions/Error"
parameters:
  pageSize:
    name: pageSize
    in: query
    description: sets the  number of factoids returned per page
    type: integer
  pageNumber:
    name: pageNumber
    in: query
    description: page number of returned factoids
    type: integer
  id:
    name: id
    in: path
    required: true
    type: string
    description: can be either the local id, or the uri or the uri of a owl:sameAs entry